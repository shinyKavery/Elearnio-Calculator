{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shiny\\\\Documents\\\\Elearnio Coding challenge\\\\elearnio\\\\src\\\\components\\\\Calculator.js\",\n  _s = $RefreshSig$();\nimport classes from './Calculator.module.css';\nimport { Form, FormGroup, Label, Button } from \"reactstrap\";\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserProfile = () => {\n  _s();\n  const [enteredNumber, setenteredNumber] = useState([]);\n  const evaluateExpressionHandler = event => {\n    event.preventDefault();\n    console.log(typeof enteredNumber);\n\n    //evalRPN(enteredNumber);\n  };\n\n  eval(A);\n  {\n    // Initialize the stack\n    let st = [];\n\n    // Iterating to the each character\n    // in the array of the string\n    for (let i = 0; i < A.length; i++) {\n      // If the character is not the special character\n      // ('+', '-' ,'*' , '/')\n      // then push the character to the stack\n      if (A[i] != \"+\" && A[i] != \"-\" && A[i] != \"/\" && A[i] != \"*\") {\n        st.push(parseInt(A[i]));\n        continue;\n      }\n\n      // else if the character is the special\n      // character then use them to\n      // perform the action\n      else {\n        let b = parseInt(st.pop());\n        let a = parseInt(st.pop());\n        if (A[i] == \"+\") st.push(a + b);else if (A[i] == \"-\") st.push(a - b);else if (A[i] == \"*\") st.push(a * b);else st.push(parseInt(a / b));\n      }\n    }\n    return parseInt(st[st.length - 1]);\n  }\n  var evalRPN = function (tokens) {\n    let set = new Set();\n    set.add('+');\n    set.add('-');\n    set.add('/');\n    set.add('*');\n    console.log(set);\n    let i = 0;\n    console.log(tokens.length);\n    while (tokens.length > 1) {\n      console.log(tokens[i + 2]);\n      if (set.has(tokens[i + 2])) {\n        const result = calculate(parseInt(tokens[i]), parseInt(tokens[i + 1]), tokens[i + 2]);\n        console.log(result);\n        tokens.splice(i, 3, result);\n        i = 0;\n      } else i++;\n    }\n    return tokens[0];\n  };\n  const calculate = (left, right, operator) => {\n    let res;\n    switch (operator) {\n      case '+':\n        res = left + right;\n        break;\n      case '-':\n        res = left - right;\n        break;\n      case '*':\n        res = left * right;\n        break;\n      case '/':\n        res = left / right;\n        break;\n    }\n    return res;\n  };\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: classes.profile,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"My Calculator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n      children: [/*#__PURE__*/_jsxDEV(Label, {\n        for: \"exampleEmail\",\n        style: {\n          fontWeight: \"600\",\n          size: \"14px\"\n        },\n        children: \"Enter a number or an expression:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: classes.input,\n        style: {\n          fontSize: \"12px\"\n        },\n        placeholder: \"Enter a number or expression\",\n        value: enteredNumber,\n        onChange: evt => {\n          setenteredNumber(evt.target.value);\n        }\n        // onBlur={this.checkEmail}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: evaluateExpressionHandler,\n      children: \"Calculate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(UserProfile, \"qkVlIsslV+7UyPKPrvQ5Fdhcmcg=\");\n_c = UserProfile;\nexport default UserProfile;\nvar _c;\n$RefreshReg$(_c, \"UserProfile\");","map":{"version":3,"names":["classes","Form","FormGroup","Label","Button","useState","UserProfile","enteredNumber","setenteredNumber","evaluateExpressionHandler","event","preventDefault","console","log","eval","A","st","i","length","push","parseInt","b","pop","a","evalRPN","tokens","set","Set","add","has","result","calculate","splice","left","right","operator","res","profile","fontWeight","size","input","fontSize","evt","target","value"],"sources":["C:/Users/shiny/Documents/Elearnio Coding challenge/elearnio/src/components/Calculator.js"],"sourcesContent":["import classes from './Calculator.module.css';\r\nimport { Form, FormGroup, Label,Button } from \"reactstrap\";\r\nimport { useState } from 'react';\r\nconst UserProfile = () => {\r\n  const [enteredNumber, setenteredNumber] = useState([]);\r\nconst evaluateExpressionHandler =(event)=>{\r\n  event.preventDefault();\r\n  console.log(typeof enteredNumber);\r\n \r\n  //evalRPN(enteredNumber);\r\n  \r\n}\r\n eval(A)\r\n{\r\n \r\n    // Initialize the stack\r\n    let st = [];\r\n     \r\n    // Iterating to the each character\r\n    // in the array of the string\r\n    for (let i = 0; i < A.length; i++)\r\n    {\r\n     \r\n        // If the character is not the special character\r\n        // ('+', '-' ,'*' , '/')\r\n        // then push the character to the stack\r\n        if (A[i] != \"+\" && A[i] != \"-\" && A[i] != \"/\"\r\n            && A[i] != \"*\") {\r\n            st.push(parseInt(A[i]));\r\n            continue;\r\n        }\r\n         \r\n         // else if the character is the special\r\n         // character then use them to\r\n         // perform the action\r\n        else {\r\n            let b = parseInt(st.pop());\r\n            let a = parseInt(st.pop());\r\n            if (A[i] == \"+\")\r\n                st.push(a + b);\r\n            else if (A[i] == \"-\")\r\n                st.push(a - b);\r\n            else if (A[i] == \"*\")\r\n                st.push(a * b);\r\n            else\r\n                st.push(parseInt(a / b));\r\n        }\r\n    }\r\n    return parseInt(st[st.length-1]);\r\n}\r\nvar evalRPN = function(tokens) {\r\n  let set = new Set();\r\n  set.add('+');\r\n  set.add('-');\r\n  set.add('/');\r\n  set.add('*');\r\n  console.log(set);\r\n  let i = 0;\r\n  console.log(tokens.length)\r\n  while(tokens.length > 1) {\r\n    console.log(tokens[i+2])\r\n      if(set.has(tokens[i+2])) {\r\n          const result = calculate(parseInt(tokens[i]), parseInt(tokens[i+1]), tokens[i+2]);\r\n          console.log(result);\r\n          tokens.splice(i, 3, result);\r\n          i = 0;\r\n      } else\r\n          i++;\r\n  }\r\n  \r\n  return tokens[0];\r\n};\r\n  \r\nconst calculate = (left, right, operator) => {\r\n  let res;\r\n  switch(operator) {\r\n      case '+':\r\n          res = left + right;\r\n          break;\r\n      case '-':\r\n          res = left - right;\r\n          break;\r\n      case '*':\r\n          res = left * right;\r\n          break;\r\n      case '/':\r\n          res = left / right;\r\n          break;\r\n  }\r\nreturn res;\r\n}\r\n  \r\n  return (\r\n    <main className={classes.profile}>\r\n      <h2>My Calculator</h2>\r\n      <FormGroup>\r\n              <Label\r\n                for=\"exampleEmail\"\r\n                style={{ fontWeight: \"600\", size: \"14px\" }}\r\n              >\r\n                Enter a number or an expression:\r\n              </Label>\r\n              <input\r\n             className={classes.input}\r\n                style={{ fontSize: \"12px\" }}\r\n                placeholder=\"Enter a number or expression\"\r\n                 value={enteredNumber}\r\n                onChange={(evt)=>{setenteredNumber(evt.target.value)}}\r\n                // onBlur={this.checkEmail}\r\n              />\r\n              \r\n            </FormGroup>\r\n           <br/>\r\n            <Button onClick={evaluateExpressionHandler}>Calculate</Button>\r\n            \r\n\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default UserProfile;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}