{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shiny\\\\Documents\\\\Elearnio Coding challenge\\\\elearnio\\\\src\\\\components\\\\Calculator.js\",\n  _s = $RefreshSig$();\nimport classes from './Calculator.module.css';\nimport { Form, FormGroup, Label, Button } from \"reactstrap\";\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserProfile = () => {\n  _s();\n  const evaluateExpressionHandler = event => {\n    event.preventDefault();\n    console.log(enteredNumber);\n    let stack = [];\n    for (let i = 0; i < enteredNumber.length; i++) {\n      // If the character is not the special character\n      // ('+', '-' ,'*' , '/')\n      // then push the character to the stack\n      if (enteredNumber[i] != \"+\" && enteredNumber[i] != \"-\" && enteredNumber[i] != \"/\" && enteredNumber[i] != \"*\") {\n        stack.push(parseInt(enteredNumber[i]));\n        continue;\n      }\n\n      // else if the character is the special\n      // character then use them to\n      // perform the action\n      else {\n        let b = parseInt(stack.pop());\n        let a = parseInt(stack.pop());\n        if (enteredNumber[i] == \"+\") stack.push(a + b);else if (enteredNumber[i] == \"-\") stack.push(a - b);else if (enteredNumber[i] == \"*\") stack.push(a * b);else stack.push(parseInt(a / b));\n      }\n    }\n    return parseInt(stack[stack.length - 1]);\n  };\n  const [enteredNumber, setenteredNumber] = useState('');\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: classes.profile,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"My Calculator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n      children: [/*#__PURE__*/_jsxDEV(Label, {\n        for: \"exampleEmail\",\n        style: {\n          fontWeight: \"600\",\n          size: \"14px\"\n        },\n        children: \"Enter a number or an expression:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: classes.input,\n        style: {\n          fontSize: \"12px\"\n        },\n        placeholder: \"Enter a number or expression\",\n        value: enteredNumber,\n        onChange: evt => {\n          setenteredNumber(evt.target.value);\n        }\n        // onBlur={this.checkEmail}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: evaluateExpressionHandler,\n      children: \"Calculate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(UserProfile, \"3KeHSPqCQZ8aBGbtWjsmPM9kiRs=\");\n_c = UserProfile;\nexport default UserProfile;\nvar _c;\n$RefreshReg$(_c, \"UserProfile\");","map":{"version":3,"names":["classes","Form","FormGroup","Label","Button","useState","UserProfile","evaluateExpressionHandler","event","preventDefault","console","log","enteredNumber","stack","i","length","push","parseInt","b","pop","a","setenteredNumber","profile","fontWeight","size","input","fontSize","evt","target","value"],"sources":["C:/Users/shiny/Documents/Elearnio Coding challenge/elearnio/src/components/Calculator.js"],"sourcesContent":["import classes from './Calculator.module.css';\r\nimport { Form, FormGroup, Label,Button } from \"reactstrap\";\r\nimport { useState } from 'react';\r\nconst UserProfile = () => {\r\nconst evaluateExpressionHandler =(event)=>{\r\n  event.preventDefault();\r\n  console.log(enteredNumber);\r\n  let stack = [];\r\n  for (let i = 0; i < enteredNumber.length; i++)\r\n    {\r\n     \r\n        // If the character is not the special character\r\n        // ('+', '-' ,'*' , '/')\r\n        // then push the character to the stack\r\n        if (enteredNumber[i] != \"+\" && enteredNumber[i] != \"-\" && enteredNumber[i] != \"/\"\r\n            && enteredNumber[i] != \"*\") {\r\n            stack.push(parseInt(enteredNumber[i]));\r\n            continue;\r\n        }\r\n         \r\n         // else if the character is the special\r\n         // character then use them to\r\n         // perform the action\r\n        else {\r\n            let b = parseInt(stack.pop());\r\n            let a = parseInt(stack.pop());\r\n            if (enteredNumber[i] == \"+\")\r\n                stack.push(a + b);\r\n            else if (enteredNumber[i] == \"-\")\r\n                stack.push(a - b);\r\n            else if (enteredNumber[i] == \"*\")\r\n                stack.push(a * b);\r\n            else\r\n                stack.push(parseInt(a / b));\r\n        }\r\n    }\r\n    return parseInt(stack[stack.length-1]);\r\n  \r\n}\r\n\r\n  const [enteredNumber, setenteredNumber] = useState('');\r\n  return (\r\n    <main className={classes.profile}>\r\n      <h2>My Calculator</h2>\r\n      <FormGroup>\r\n              <Label\r\n                for=\"exampleEmail\"\r\n                style={{ fontWeight: \"600\", size: \"14px\" }}\r\n              >\r\n                Enter a number or an expression:\r\n              </Label>\r\n              <input\r\n             className={classes.input}\r\n                style={{ fontSize: \"12px\" }}\r\n                placeholder=\"Enter a number or expression\"\r\n                 value={enteredNumber}\r\n                onChange={(evt)=>{setenteredNumber(evt.target.value)}}\r\n                // onBlur={this.checkEmail}\r\n              />\r\n              \r\n            </FormGroup>\r\n           <br/>\r\n            <Button onClick={evaluateExpressionHandler}>Calculate</Button>\r\n            \r\n\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default UserProfile;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}